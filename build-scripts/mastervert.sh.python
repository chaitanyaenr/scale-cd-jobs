#!/bin/bash

SETUP_PBENCH=$1
CONTAINERIZED=$2
CLEAR_RESULTS=$3
MOVE_RESULTS=$4
TOOLING_INVENTORY=$5
FIRST_RUN_PROJECTS=$6
SECOND_RUN_PROJECTS=$7
THIRD_RUN_PROJECTS=$8
MODE=$9
FIRST_RUN_PROJECTS_TAG=clusterp
SECOND_RUN_PROJECTS_TAG=clp
THIRD_RUN_PROJECTS_TAG=cproject

## Setup pbench
if [[ "${CONTAINERIZED}" != "true" ]] && [[ "${SETUP_PBENCH}" == "true" ]]; then
	set -e
	# register tools
	echo "Running pbench ansible"
    	echo "----------------------------------------------------------"
        if [[ -d "/root/pbench" ]]; then
        	rm -rf /root/pbench
        fi
    	git clone https://github.com/distributed-system-analysis/pbench.git /root/pbench
    	cd /root/pbench/contrib/ansible/openshift/
    	pbench-clear-tools
   	ansible-playbook -vv -i ${TOOLING_INVENTORY} pbench_register.yml
    	echo "Finshed registering tools, labeling nodes"
    	echo "----------------------------------------------------------"
    	echo "List of tools registered:"
    	echo "----------------------------------------------------------"
    	pbench-list-tools
    	echo "----------------------------------------------------------"
elif [[ "${CONTAINERIZED}" == "true" ]] && [[ "${SETUP_PBENCH}" == "true" ]]; then
	# check if the jump node has pbench-controller image
        docker images | grep -w "docker.io/ravielluri/image:controller"
        if [[ $? != 0 ]]; then
                docker pull ravielluri/image:controller
        fi
        cd /root/svt/openshift_tooling/pbench
        ./setup_pbench_pods.sh
else
    	echo "Not setting up pbench"
fi
    
# clear results
if [[ "${CLEAR_RESULTS}" == "true" ]]; then
	pbench-clear-results
fi

# Run tests	
export KUBECONFIG=${KUBECONFIG-$HOME/.kube/config}
oc project default
cd /root/svt/openshift_scalability
# replace number of projects for the first run
echo "RUNNING FIRST ITERATION OF MASTERVERTICAL WITH $FIRST_RUN_PROJECTS PROJECTS"
echo "---------------------------------------------------------------------------"
sed -i "/- num/c  \  - num: $FIRST_RUN_PROJECTS" /root/svt/openshift_scalability/config/pyconfigMasterVertScalePause.yaml
sed -i "/basename/c  \    basename: $FIRST_RUN_PROJECTS_TAG" /root/svt/openshift_scalability/config/pyconfigMasterVertScalePause.yaml
pbench-user-benchmark --pbench-post='/usr/local/bin/pbscraper -i $benchmark_results_dir/tools-default -o $benchmark_results_dir; ansible-playbook -vvv -i /root/svt/utils/pbwedge/hosts /root/svt/utils/pbwedge/main.yml -e new_file=$benchmark_results_dir/out.json -e git_test_branch='"mastervert_$FIRST_RUN_PROJECTS"'' -- /root/svt/openshift_scalability/masterVertical.sh python $MODE
#pbench-user-benchmark -- /root/svt/openshift_scalability/masterVertical.sh python
# Move results
if [[ "${MOVE_RESULTS}" == "true" ]]; then
	pbench-move-results --prefix=mastervert_"$FIRST_RUN_PROJECTS"_projects
fi
if [[ $SECOND_RUN_PROJECTS != 0 ]]; then
	echo "RUNNING SECOND ITERATION OF MASTERVERTICAL WITH $SECOND_RUN_PROJECTS PROJECTS"
	echo "-----------------------------------------------------------------------------"
	sed -i "/- num/c  \  - num: $SECOND_RUN_PROJECTS" /root/svt/openshift_scalability/config/pyconfigMasterVertScalePause.yaml
	sed -i "/basename/c  \    basename: $SECOND_RUN_PROJECTS_TAG" /root/svt/openshift_scalability/config/pyconfigMasterVertScalePause.yaml
	TOTAL_PROJECTS=$((FIRST_RUN_PROJECTS+SECOND_RUN_PROJECTS))
	pbench-user-benchmark --pbench-post='/usr/local/bin/pbscraper -i $benchmark_results_dir/tools-default -o $benchmark_results_dir; ansible-playbook -vvv -i /root/svt/utils/pbwedge/hosts /root/svt/utils/pbwedge/main.yml -e new_file=$benchmark_results_dir/out.json -e git_test_branch='"mastervert_$TOTAL_PROJECTS"'' -- /root/svt/openshift_scalability/masterVertical.sh python $MODE
	#pbench-user-benchmark -- /root/svt/openshift_scalability/masterVertical.sh python
	# Move results
	if [[ "${MOVE_RESULTS}" == "true" ]]; then
		pbench-move-results --prefix=mastervert_"$TOTAL_PROJECTS"_projects
	fi
fi

if [[ $THIRD_RUN_PROJECTS != 0 ]]; then
	# replace number of projects for the third run
	echo "RUNNING THIRD ITERATION OF MASTERVERTICAL WITH $THIRD_RUN_PROJECTS PROJECTS"
	echo "---------------------------------------------------------------------------"
	sed -i "/- num/c  \  - num: $THIRD_RUN_PROJECTS" /root/svt/openshift_scalability/config/pyconfigMasterVertScalePause.yaml
	sed -i "/basename/c  \    basename: $THIRD_RUN_PROJECTS_TAG" /root/svt/openshift_scalability/config/pyconfigMasterVertScalePause.yaml
	TOTAL_PROJECTS=$((TOTAL_PROJECTS+THIRD_RUN_PROJECTS))
	pbench-user-benchmark --pbench-post='/usr/local/bin/pbscraper -i $benchmark_results_dir/tools-default -o $benchmark_results_dir; ansible-playbook -vvv -i /root/svt/utils/pbwedge/hosts /root/svt/utils/pbwedge/main.yml -e new_file=$benchmark_results_dir/out.json  -e git_test_branch='"mastervert_$TOTAL_PROJECTS"'' -- /root/svt/openshift_scalability/masterVertical.sh python $MODE
	#pbench-user-benchmark -- /root/svt/openshift_scalability/masterVertical.sh python
	# Move results
	if [[ "${MOVE_RESULTS}" == "true" ]]; then
		pbench-move-results --prefix=mastervert_"$TOTAL_PROJECTS"_projects
	fi
fi

# Delete all the projects created by the test
echo "Deleting the namespaces created"
OCVER=$(oc version | grep v3.11 | cut -d' ' -f2 | head -1 | cut -d'.' -f1,2)
if [[ $OCVER == "v3.11" ]]; then 
	for ((n=0;n<$FIRST_RUN_PROJECTS;n++)); do
                oc delete project --wait=false $FIRST_RUN_PROJECTS_TAG$n
        done
	for ((n=0;n<$SECOND_RUN_PROJECTS;n++)); do
		oc delete project --wait=false $SECOND_RUN_PROJECTS_TAG$n
       	done
	for ((n=0;n<$THIRD_RUN_PROJECTS;n++)); do
		oc delete project --wait=false $THIRD_RUN_PROJECTS_TAG$n
        done
else
	for ((n=0;n<$FIRST_RUN_PROJECTS;n++)); do
		oc delete project --wait=false $FIRST_RUN_PROJECTS_TAG$n
	done 
	if [[ $SECOND_RUN_PROJECTS != 0 ]]; then
		for ((n=0;n<$SECOND_RUN_PROJECTS;n++)); do
			oc delete project --wait=false $SECOND_RUN_PROJECTS_TAG$n
		done
	fi
	if [[ $THIRD_RUN_PROJECTS != 0 ]]; then
		for ((n=0;n<$THIRD_RUN_PROJECTS;n++)); do
			oc delete project --wait=false $THIRD_RUN_PROJECTS_TAG$n
		done
	fi

fi 	

# wait for cluster to settle
if [[ "$MODE" == "CI" ]]; then
	sleep 30
else
	sleep 1800
fi
